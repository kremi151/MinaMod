package lu.kremi151.minamod.worldgen;

import java.io.IOException;
import java.util.Random;

import lu.kremi151.minamod.MinaLootTableList;
import lu.kremi151.minamod.MinaMod;
import lu.kremi151.minamod.block.BlockStool;
import lu.kremi151.minamod.entity.EntityWookie;
import lu.kremi151.minamod.schematic.ISchematic;
import lu.kremi151.minamod.schematic.sponge.SpongeSchematicHelper;
import lu.kremi151.minamod.schematic.transformator.Transformator;
import lu.kremi151.minamod.schematic.transformator.TransformatorRotation;
import lu.kremi151.minamod.util.MinaUtils;
import lu.kremi151.minamod.worlddata.MinaWorld;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.item.EnumDyeColor;
import net.minecraft.tileentity.TileEntityChest;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.Rotation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;
import net.minecraft.world.storage.loot.LootContext;

public class WorldGenWookieHouse extends WorldGenSchematic {

	public WorldGenWookieHouse() {
		super(loadWookieHouse(), 10);
	}

	private static ISchematic loadWookieHouse() {
		final String file_name = "wookie_house.schem";
		try {
			return SpongeSchematicHelper.loadSchematicFromAssets(new ResourceLocation(MinaMod.MODID, "wookie_house"));
		} catch (IOException e) {
			e.printStackTrace();
			throw new RuntimeException("Cannot load schematic " + file_name + " from assets");
		}
	}

	@Override
	protected void onPostGenerate(Random random, World world, BlockPos pos, Transformator transformator) {
		BlockPos chestPos = getSchematic().getRealPosition(pos, 1, 1, 3, transformator);
		TileEntityChest chest = (TileEntityChest) world.getTileEntity(chestPos);
		world.getLootTableManager().getLootTableFromLocation(MinaLootTableList.WOOKIE_HOUSE).fillInventory(chest,
				random, new LootContext.Builder((WorldServer) world).build());// TODO

		BlockPos chairPos = getSchematic().getRealPosition(pos, 1, 1, 1, transformator);
		IBlockState chair = world.getBlockState(chairPos);
		world.setBlockState(chairPos, chair.withProperty(BlockStool.COLOR,
				EnumDyeColor.values()[random.nextInt(EnumDyeColor.values().length)]));

		EntityWookie wookie = new EntityWookie(world);
		BlockPos wookiePos = getSchematic().getRealPosition(pos, 2, 1, 2, transformator);
		wookie.setPosition(wookiePos.getX() + 0.5d, wookiePos.getY() + 0.1d, wookiePos.getZ() + 0.5d);
		wookie.setHomePosAndDistance(wookiePos, 8);
		world.spawnEntity(wookie);
	}

	@Override
	protected boolean canGenerate(Random random, World world, int chunkX, int chunkZ) {
		return super.canGenerate(random, world, chunkX, chunkZ)
				&& checkMinaWorldSettings(random, world, chunkX, chunkZ);
	}
	
	@Override
	protected Transformator getTransformator(Random random){
		return new TransformatorRotation(getSchematic().getWidth(), getSchematic().getHeight(), Rotation.values()[random.nextInt(Rotation.values().length)]);
	}

	private boolean checkMinaWorldSettings(Random random, World world, int chunkX, int chunkZ) {
		MinaWorld mw = MinaWorld.forWorld(world);
		return mw.getConfiguration().shouldGenerateWookieHouses() && world
				.getBiome(new BlockPos((chunkX * 16) + random.nextInt(16), 0, (chunkZ * 16) + random.nextInt(16))) == mw
						.getConfiguration().getBiomeForWookieHouses();
	}

	@Override
	protected BlockPos findPosition(Random random, World world, int chunkX, int chunkZ) {
		int x = (chunkX * 16) + random.nextInt(16);
		int z = (chunkZ * 16) + random.nextInt(16);
		int y = MinaUtils.getHeightValue(world, x, z);
		BlockPos pos = new BlockPos(x, y, z);
		for (int i = 0; i < getSchematic().getWidth(); i++) {
			for (int j = 0; j < getSchematic().getLength(); j++) {
				IBlockState state = world.getBlockState(new BlockPos(x + i, y - 1, z + j));
				if (state.getBlock() != Blocks.DIRT && state.getBlock() != Blocks.GRASS) {
					return null;
				}
			}
		}
		return pos;
	}

}
